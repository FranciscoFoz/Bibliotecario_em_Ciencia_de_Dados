# -*- coding: utf-8 -*-
"""Bibliotecario_Ciencia_de_Dados_Introducao_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ValAmvjAxmtYK8wqis6U_Qp1JCrVDtLu

Autor: [Francisco Foz](https://www.linkedin.com/in/francisco-tadeu-foz/)

# <font color = green> INTRODUÇÃO AO PYTHON

Este notebook faz parte de um projeto iniciado por mim, Francisco Foz, integrante do time Alura Stars. Com o objetivo de auxiliar na disseminação da informação em Ciência de Dados para a área da biblioteconomia. Utilizando do livro "Data Science do zero" de Joel Grus.
Abordarei alguns conceitos básicos da linguagem para ilustrar e adentrar na ferramenta.

#Variaveis
"""

mes = 11

autor = "Le Coadic, Yves-François"
autor

subject =	"Biblioteconomia"         #string

subject_2 = "Ciência da informação" #string

date	= 2004                        #int

price = 44.90                       #float

comparativo = subject == subject_2   #bool

"""## Identação


"""

def saudacao_inicial():
  print('Olá usuário! O que você gosta de ler?')
saudacao_inicial()

"""#Funções"""

def saudacao_inicial():
  nome = input('Qual é o seu nome?')
  print(f'Olá {nome}! O que você gosta de ler?')
saudacao_inicial()

"""#Listas"""

assuntos = ['Amazônia - História',	
            'Gestão ambiental', 
            'Sistemas de informação geográfica', 
            'Amazon', 
            'Environmental management']
assuntos

print(assuntos [0])
print(assuntos [1])
print(assuntos [2])

assuntos [2:4]

assuntos.append('Geographic information system')
assuntos

"""#Tuplas

"""

dias_da_Semana = ("Dom","Seg","Ter","Qua","Qui","Sex","Sab")

dias_da_Semana[0]

"""#Dicionários"""

db_livro = {
  "title" :	"A ciência da informação",
  "creator"	: "Le Coadic, Yves-François",
  "subject" :	["Biblioteconomia",	"Ciência da informação"],
  "description"	: "Tradução de: La science de l'information",
  "publisher" :	"Briquet de Lemos",
  "date" :	"2004",
  "type" :	"LIVRO",
  "format" :	"124p. : il.",
  "identifier" :	["8585637234 (broch.)"],
  "language" :	[	"por", "fre"]
  }

db_livro["creator"]

db_livro["subject"]

db_livro["subject"][0]

"""#Condicionais"""

qtd_usuarios = int(input('Qual é a quantidade de usuarios da biblioteca? '))

if qtd_usuarios <= 50:
  print('A biblioteca tem poucos usuarios')
elif qtd_usuarios <= 200:
  print('A biblioteca tem uma quantidade razoável de usuarios')
elif qtd_usuarios <= 500:
  print('A biblioteca tem muitos usuarios')
else:
  print('A biblioteca tem um número muito grande de usuarios')

"""#Repetição"""

autores = [
  "Dante Alighieri",
  "Machado de Assis",
  "Franz Kafka",
  "Luís Vaz de Camões",
  "William Shakespeare",
  "José Saramago",
  "Aristóteles",
  "Júlio Verne",
  "Fernando Pessoa",
  "José de Alencar",
  "Euclides da Cunha",
  "Thomas Morus"
]

for autor in autores:
  print(autor)

numero = -10
while (numero < 10):
  numero += 1
  print(numero)

"""#Veracidade"""

10 < 5

20 > 10

False   #falso
None    #nulo
0       #zero
''      #string vazia
[]      #lista vazia
()      #tupla vazia
{}      #dicionário vazio

lista_all = [5, True, (2,2)]
all(lista_all)

lista_all = [5, True, ()]
all(lista_all)

lista_any = [1, 0, ()]
any(lista_any)

lista_any = [0, 0, ()]
any(lista_any)

"""#Importar Módulos

"""

import collections

import collections as coll
coll.Counter

import pandas as pd
pd

from collections import Counter 
Counter

"""#Contador"""

interesses = [
  'biblioteconomia',
  'gatos',
  'livros',
  'ciencia de dados',
  'filmes',
  'gatos',
  'livros',
  'séries',
  'biblioteconomia',
  'filmes',
  'séries',
  'gatos',
  'trekking',
  'leitura',
  'história',
  'matemática',
  'filmes',
  'séries',
  'livros',
  'ciencia de dados',
  'livros',
  'filmes',
  'biblioteconomia'
  ]

contagem_interesse = Counter(interesses)
contagem_interesse

for interesse, count in contagem_interesse.most_common(2):
    print (interesse, count)

"""#Conjunto"""

id_contratos = set()
id_contratos.add(1)
id_contratos.add(2)
id_contratos.add(3)
id_contratos.add(4)
id_contratos.add(5)
id_contratos

id = 12

id in id_contratos

"""#Ordenação"""

ordenacao = [10,2,8,4,6,0]
print(sorted(ordenacao))    #sorted não altera a lista
print(ordenacao)

ordenacao.sort()            #.sort altera a lista
print(ordenacao)

ordenacao

qualis = ['B1','A1','B4']

sorted(qualis, reverse=True)

"""#Aleatoriedade"""

import random

random.random()

random.random()

random.seed(10)
print(random.random())
random.seed(2)
print(random.random())
random.seed(10)
print(random.random())

random.random()

random.randrange(10)    #será um número entre 0 e 10

random.randrange(10,100) #será um número entre 10 e 100

periodicos = [
              'BRITISH JOURNAL OF NURSING', 
              'CIRCULATION (NEW YORK, N.Y.)', 
              'EUROPEAN JOURNAL OF HEART FAILURE', 
              'EUROPEAN JOURNAL OF ENDOCRINOLOGY'
              ]
random.choice(periodicos)

lista_de_numeros = range(100)
amostra = random.sample(lista_de_numeros,4)   #escolherá 4 números dentre a lista de 0 a 100 passada
amostra

"""#Expressões Regulares"""

import re       #módulo de expressões regulares

"""#Compreensões de Listas

"""

lista = range(5)

for x in lista:         
  if x % 2 == 0:    
    print(x)

numeros_pares = [x for x in lista if x % 2 == 0]
numeros_pares

range(0,5)

"""#Geradores e Iteradores"""

def exemplo_de_gerador():
  x = 0
  while x < 1000000: 
    print(x)
    x = x + 1
exemplo_de_gerador()

def exemplo_de_gerador():
  x = 0
  while x < 1000000: 
    print(x)
    yield x
    x = x + 1
exemplo_de_gerador()

gerador = exemplo_de_gerador()
next(gerador)
next(gerador)
next(gerador)
next(gerador)



"""#Programação Orientada a Objeto"""

class UsuarioUniversitario:
  def __init__(self, id, curso):
    self.__id = id;
    self.__curso = curso;
    self.__disciplinas_ativas = disciplinas_ativas

  def consulta(self):
    # Codigo para consultar informação
    
  def pega_emprestado(self):
    # Codigo para pegar emprestado um recurso informacional

  def devolve(self):
    # Codigo para devolver recurso informacional

  def solicita_referencia(self):
    # Codigo para solicitar referência ao bibliotecário

"""#Ferramentas Funcionais

"""

def subtrair_1(x):
  return x - 1

numeros_pares = [2,4,6,8,10]

numeros_impares = map(subtrair_1, numeros_pares)
print(list(numeros_impares))

from functools import reduce

def multiplicar(x, y):
  return x * y

numeros_multiplicados = reduce(multiplicar, numeros_pares)
numeros_multiplicados

def numeros_negativos(x):
  if x < 0: 
    return x

lista_numeros = range(-10,100)
print(list(filter(numeros_negativos, lista_numeros)))

"""#Enumeração"""

CDD = ['Generalidades', 
       'Filosofia',
       'Religião',
       'Ciências sociais',
       'Línguas',
       'Ciências puras',
       'Ciências aplicadas',
       'Artes',
       'Literatura',
       'História e geografia']

print(list(enumerate(CDD)))



"""#Descompactação de Zip e argumentos

"""

lista_alfabetica = ['a','b','c']
lista_numerica =    [1,2,3]
lista_alfanumerica = list(zip(lista_alfabetica,lista_numerica))
lista_alfanumerica

letras, numeros = (zip(*lista_alfanumerica))
letras, numeros

"""#Args e Kwargs

"""

def assuntos_livro(titulo, *args):
    print('Título: ', titulo)
    for assunto in args:
        print('Assunto: ', assunto)

assuntos_livro('A aventura do livro', 
               'Livros e leitura - História',
               'Comunicação escrita', 
               'Tecnologia da informação - Aspectos sociais')

assuntos_livro('Crime e Castigo', 'Ficção Russa')

def autor_do_livro(titulo,**kwargs):
      autor = kwargs.get('creator')
      print(autor)

autor_do_livro('O Pensamento do exterior', 
               creator='Foucalt, Michel, 1926-1984', subject='Filosofia Francesa')